#!/usr/bin/env dictu

import System;

import "kahless.du" as kahless;


@Table("USERS")
class User < kahless.Model {
    @Column("first_name")
    var firstName = "";

    @Column("last_name")
    var lastName = "";
    var age = 0;
}

@Table("ROLES")
class Role < kahless.Model {
    var name = "";
}

{ // main
    const config = kahless.Config("sqlite", "test.db");
    config.setDebug(true);

    var k = kahless.Kahless(config);

    const tables = [User(), Role()];
    tables.forEach(def(table) => {
        print("migrating table: {}".format(table._name));

        const err = k.migrate(table);
        if (not Success(err)) {
            print("error: {}".format(err));
            System.exit(1);
        }
    });

    const user = User();
    user.firstName = "John";
    user.lastName = "Doe";
    user.age = 28;

    k.create(user);
    const users = k.rawQuery("SELECT * FROM USERS").matchError(
        def (error) => error
    );

    // print(k.last(user).unwrap().rows);
    // print(k.last(user).unwrap().rowsAffected);
    
    // const delRes = k.delete(User(), 36);
    // if (not delRes.success()) {
    //     print(delRes.unwrapError());
    //     System.exit(1);
    // }

    // users = k.rawQuery("SELECT * FROM USERS").matchError(
    //     def (error) => error
    // );
    // users.forEach(def(user) => print(user));

    // const u2 = User();
    // u2.id = 2;
    // u2.age = 74;
    // u2.firstName = "James";
    // u2.lastName = "Downsey";
    // const resUpdate = k.update(u2);
    // if (not resUpdate.success()) {
    //     print(resUpdate.unwrapError());
    // }
    // users = k.rawQuery("SELECT * FROM USERS").matchError(
    //     def (error) => error
    // );
    // users.forEach(def(user) => print(user));

    // const jsonRes = k.json(User());
    // const jres = jsonRes.unwrap();
    // print("Rows affected: {}".format(jres.rowsAffected));
    // jres.rows.forEach(def(user) => print(user));

    const last = k.last(User());
    //print(last.unwrap().rows[0].id);

    const find = k.find(User());
    find.unwrap().rows.forEach(def(user) => print(user));

    const first = k.first(User());
    //print(first.unwrap().rows[0].id);

    const role = Role();
    role.name = "Admin";
    const err = k.create(role);

    const roles = k.rawQuery("SELECT * FROM ROLES").matchError(
        def (error) => error
    );
    
    print(roles);
    const find2 = k.find(Role());
    print(find2.unwrap().rowsAffected);
    find2.unwrap().rows.forEach(def(role) => print(role.name));
}
