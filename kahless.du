import Datetime;
import JSON;
import Log;
import Object;
import Sqlite;
import System;


const
    selectQuery = "SELECT {} FROM {}",
    insertQuery = "INSERT INTO {} (",
    updateQuery = "UPDATE {} SET",
    createQuery = "CREATE TABLE IF NOT EXISTS {} (",
    deleteQuery = "DELETE FROM {} WHERE",
    lastRowInsertedQuery = "SELECT LAST_INSERT_ROWID()",
    selectJsonQuery = "SELECT json_object('id', id, 'createdAt', created_at, 'updatedAt', updated_at, 'deletedAt', deleted_at, {}) FROM {}";

const
    singleQuote = "\"",
    spaceSeperator = " ";

const dictuToSQLType = {
    "string": "TEXT",
    "number": "INTEGER",
    "bool": "REAL",
};

/*
 * Config contains fieldss to provide when instantiating
 * a new instance of Kahless.
 */
class Config { 
    var debug = false;
    var disableSoftDelete = false;

    init(driver, path) {
        this.driver = driver;
        this.path = path;
    }

    setDebug(debug) {
        this.debug = debug;
    }

    setDisableSoftDelete(disabled) {
        this.disableSoftDelete = disabled;
    }
}

/*
 * Result holds the information associated with the 
 * previously ran query.
 */
class Result {
    var rows = nil;
    var rowsAffected = 0;
}

/*
 * Model is a basic class that includes the following 
 * fields: id, created_at, updated_at, deleted_at.
 *
 * To use this model in your model, have your class
 * inherit this class.
 * 
 * Models need to be defined with their zero value.
 */
class Model {
    @PrimaryKey
    @AutoIncrement
    @Type("INTEGER")
    var id = 0;

    @Type("DATETIME")
    @Column("created_at")
    var createdAt = "";

    @Type("DATETIME")
    @Column("updated_at")
    var updatedAt = "";

    @Type("DATETIME")
    @Column("deleted_at")
    var deletedAt = "";
}

/*
 * isModelField checks if the given field is
 * a field in the Model class.
 */
def isModelField(field) {
    return ["id", "createdAt", "updatedAt", "deletedAt"].contains(field);
}

/*
 * getTimestamp generates a new timestamp to be used during
 * record updates.
 */
def getTimestamp() {
    return Datetime.strftime("%Y-%m-%d %H:%M:%S");
}

/*
 * Validation contains common logic used throughout the 
 * Kahless module. It is to be inhereted into any class
 * needing access to the logic.
 */
class Validation {
    verifyAnnotations(model, name, required) {
        if (model._class.classAnnotations == nil) {
            return Error("class annotation missing from {}".format(model._name));
        }

        if (not model._class.classAnnotations.exists(name)) {
            return Error("'{}' annotation must exist on the given model".format(name));
        }
        
        return Success(nil);
    }
}

/*
 * Migrate is used to create tables in the database 
 * for the given model.
 */
class Migrate < Validation {
    init(var db) {}

    /*
     * run performs the migration.
     */
    run(model) {
        const query = this.buildQuery(model).unwrap();

        if (this.db.config.debug) {
            Log.println("DEBUG: {}".format(query));
        }

        return this.db.db.execute(query);
    }

    /* 
     * buildQuery builds the SQL query to create the table
     * for the given model.
     */
    private buildQuery(model) {
        const klass = model._class;

        const err = this.verifyAnnotations(model, "Table", true);
        if (not err.success()) {
            return err;
        }

        const tableName = klass.classAnnotations["Table"];

        var query = createQuery.format(tableName);

        const fields = model.getAttributes()["fields"].filter(def(x) => x != "_name");
        const fieldsLen = fields.len();
        const fieldAnnotations = klass.fieldAnnotations;
        
        for (var i = 0; i < fields.len(); i += 1) {
            if (fieldAnnotations.get(fields[i]) != nil and fieldAnnotations.get(fields[i]).exists("Column")) {
                query += fieldAnnotations.get(fields[i]).get("Column");
            } else {
                query += fields[i];
            }
            
            if (fieldAnnotations.get(fields[i]) != nil and fieldAnnotations.get(fields[i]).exists("Type")) {
                const fieldType = fieldAnnotations.get(fields[i]).get("Type");
                if (fieldType == "DATETIME" and fields[i] == "createdAt") {
                    query += spaceSeperator + "DATETIME DEFAULT CURRENT_TIMESTAMP";
                } else {
                    query += spaceSeperator + fieldAnnotations.get(fields[i]).get("Type");
                }
            } else {
                query += spaceSeperator + dictuToSQLType.get(type(fields[i]));
            }

            if (fieldAnnotations.get(fields[i]) != nil and fieldAnnotations.get(fields[i]).exists("PrimaryKey")) {
                query += " PRIMARY KEY";
            }

            if (fieldAnnotations.get(fields[i]) != nil and fieldAnnotations.get(fields[i]).exists("AutoIncrement")) {
                query += " AUTOINCREMENT";
            }

            if (i != fields.len()-1) {
                query += ", ";
            } else {
                query += ")";
            }
        }
        
        return Success(query);
    }
}

/* 
 * Kahless is the primary provider of services for the module. All
 * connections, queries, and validations are done via this class.
 */
class Kahless < Validation {
    init(config) {
        this.config = config;
        
        this.connect();
    }

    private tableName(model) {
        return model._class.classAnnotations.get("Table");
    }

    /* 
     * connect connects to the given database based on the driver
     * configured. Currently, only SQLite is supported.
     */
    connect() {
        if (this.config.driver == "sqlite") {
            if (this.config.path == "") {
                this.db = Sqlite.connect(":memory:").unwrap();
            } else {
                this.db = Sqlite.connect(this.config.path).unwrap();
            }
        }
    }

    /* 
     * migrate performs a migration for the given models.
     */
    migrate(...models) {
        return models.map(def(m) => Migrate(this).run(m));
    }

    /*
     * create takes a model and inserts a record associated with it.
     */
    create(model) {
        const klass = model._class;

        const err = this.verifyAnnotations(model, "Table", true);
        if (not err.success()) {
            return err;
        }

        const tableName = model._class.classAnnotations.get("Table");
        var query = insertQuery.format(tableName);

        const fields = model.getAttributes()["fields"].filter(def(x) => x != "_name" and not isModelField(x));
        const fieldsLen = fields.len();
        const fieldAnnotations = klass.fieldAnnotations;

        for (var i = 0; i < fieldsLen; i += 1) {
            const separator = i + 1 == fieldsLen ? " " : ", ";
            if (fieldAnnotations.get(fields[i])?.exists("Column")) {
                query += fieldAnnotations.get(fields[i]).get("Column") + separator;
            } else {
                query += fields[i] + separator;
            }
        }

        query = query[0:query.len()-1];
        query += ") VALUES (";

        for (var i = 0; i < fieldsLen; i += 1) {
            var value = model.getAttribute(fields[i]);
            if (type(value) != "string") {
                value = value.toString();
            }
            query += singleQuote + value + singleQuote + ",";
        }

        query = query[0:query.len()-1];
        query += ")";

        if (this.config.debug) {
            Log.println("DEBUG: {}".format(query));
        }

        const insert = this.db.execute(query);

        if (this.config.debug) {
            Log.println("DEBUG: {}".format(lastRowInsertedQuery));
        }

        const lastId = this.db.execute(lastRowInsertedQuery).unwrap();
        model.id = lastId[0][0];

        return insert;
    }

    /* 
     * rawQuery executes the given query with no checks
     * or validations and returns the results.
     */
    rawQuery(query) {
        if (this.config.debug) {
            Log.println("DEBUG: {}".format(query));
        }

        return this.db.execute(query);
    }

    /* 
     * update takes a model and updates the associated row.
     */
    update(model) {
        const klass = model._class;

        const err = this.verifyAnnotations(model, "Table", true);
        if (not err.success()) {
            return err;
        }

        const tableName = this.tableName(model);
        var query = updateQuery.format(tableName);

        const id = model.getAttribute("id");
        if (id == 0) {
            return Error("invalid ID given");
        }

        const fields = model.getAttributes()["fields"].filter(def(x) => x != "_name");
        const fieldsLen = fields.len();
        const fieldAnnotations = klass.fieldAnnotations;
        
        for (var i = 0; i < fieldsLen; i += 1) {
            if (["id", "createdAt", "deletedAt"].contains(fields[i])) {
                continue;
            }
            
            if (fields[i] == "updatedAt") {
                model.setAttribute(fields[i], getTimestamp());
            }

            const v = model.getAttribute(fields[i]);
            const t = type(v);
            if (t == "string" and v == "") {
                continue;
            }
        
            if (fieldAnnotations.get(fields[i])?.exists("Column")) {
                query += spaceSeperator + fieldAnnotations.get(fields[i]).get("Column");
            } else {
                query += spaceSeperator + fields[i];
            }

            switch(t) {
                case "string": {
                    query += " = '{}',".format(v);
                }
                case "number": {
                    query += " = {},".format(v);
                }
            }
        }

        query = query[0:query.len()-1];
        query += " WHERE id = {};".format(id);
        
        if (this.config.debug) {
            Log.println("DEBUG: {}".format(query));
        }

        return this.db.execute(query);
    }

    /*
     * delete deletes the the record associated with the model
     * and value given.
     */
    delete(model, v=nil) {
        const err = this.verifyAnnotations(model, "Table", true);
        if (not err.success()) {
            return err;
        }

        const tableName = this.tableName(model);

        if (not this.config.disableSoftDelete) {
            // check for "deletedAt" field and perform soft delete
            if (model.getAttribute("deletedAt") != nil) {
                model.setAttribute("deletedAt", getTimestamp());
                const query = "UPDATE {} SET deleted_at = '{}' WHERE id = {}".format(tableName, getTimestamp(), v);
                
                if (this.config.debug) {
                    Log.println("DEBUG: {}".format(query));
                }

                return this.db.execute(query);
            }
        }

        var query = deleteQuery.format(tableName);

        const t = type(v);
        switch(t) {
            case "list": {
                if (v.len() == 0) {
                    return Error("invalid list of IDs");
                }

                const ids = v.toString().replace("[", "").replace("]", "");
                query += " id in ({})".format(ids);            
            }
            case "string": {
                if (v.toNumber().unwrap() < 0) {
                    return Error("invalid ID");
                }

                query += " id = {}".format(id);
            }
            case "number": {
                if (v < 1) {
                    return Error("invalid ID");
                }

                query += " id = {}".format(v);
            }
            default:
                return Error("unsupported type: ", t);
        }

        if (this.config.debug) {
            Log.println("DEBUG: {}".format(query));
        }

        return this.db.execute(query);
    }

    /* 
     * first gets the first record ordered by primary key.
     */
    first(model) {
        const klass = model._class;

        const err = this.verifyAnnotations(model, "Table", true);
        if (not err.success()) {
            return err;
        }

        const tableName = this.tableName(model);
        const fields = model.getAttributes()["fields"].filter(def(x) => x != "_name");
        const fieldsLen = fields.len();
        const fieldAnnotations = klass.fieldAnnotations;

        var jsonFields = "";

        for (var i = 0; i < fieldsLen; i += 1) {
            if (isModelField(fields[i])) {
                continue;
            }
        
            if (fieldAnnotations.get(fields[i]) != nil) {
                if (fieldAnnotations.get(fields[i]).exists("Column")) {
                    jsonFields += "'" + fields[i] + "', " + fieldAnnotations.get(fields[i]).get("Column") + ",";
                }
            } else {
                jsonFields += "'" + fields[i] + "', " + fields[i] + ",";
            }
        }

        jsonFields = jsonFields[0:jsonFields.len()-1];

        var query = selectJsonQuery.format(jsonFields, tableName);
        query += " ORDER BY id LIMIT 1";

        if (this.config.debug) {
            Log.println("DEBUG: {}".format(query));
        }
        
        const res = this.db.execute(query);
        if (not res.success()) {
            return res;
        }

        const r = Result();
        r.rows = [];

        res.unwrap().forEach(def(row) => {
            const parsed = JSON.parse(row[0]).unwrap();
            const newModel = klass();

            for (var i = 0; i < fieldsLen; i += 1) {
                // filter out "deleted" records
                if (fields[i] == "deletedAt" and fields[i] != nil) {
                    continue;
                }
                newModel.setAttribute(fields[i], parsed.get(fields[i]));
            }

            r.rows.push(newModel);
        });
        r.rowsAffected = r.rows.len();

        return Success(r); 
    }

    /* 
     * find gets all records for the given model.
     */
    find(model) {
        const klass = model._class;
        
        const err = this.verifyAnnotations(model, "Table", true);
        if (not err.success()) {
            return err;
        }

        const tableName = this.tableName(model);
        const fields = model.getAttributes()["fields"].filter(def(x) => x != "_name");
        const fieldsLen = fields.len();
        const fieldAnnotations = klass.fieldAnnotations;

        var jsonFields = "";

        for (var i = 0; i < fieldsLen; i += 1) {
            if (isModelField(fields[i])) {
                continue;
            }
        
            if (fieldAnnotations.get(fields[i]) != nil) {
                if (fieldAnnotations.get(fields[i]).exists("Column")) {
                    jsonFields += "'" + fields[i] + "', " + fieldAnnotations.get(fields[i]).get("Column") + ",";
                }
            } else {
                jsonFields += "'" + fields[i] + "', " + fields[i] + ",";
            }
        }

        jsonFields = jsonFields[0:jsonFields.len()-1];

        var query = selectJsonQuery.format(jsonFields, tableName);

        if (this.config.debug) {
            Log.println("DEBUG: {}".format(query));
        }

        const res = this.db.execute(query);
        if (not res.success()) {
            return res;
        }

        const r = Result();
        r.rows = [];

        res.unwrap().forEach(def(row) => {
            const parsed = JSON.parse(row[0]).unwrap();
            const newModel = klass();

            for (var i = 0; i < fieldsLen; i += 1) {
                // filter out "deleted" records
                if (fields[i] == "deletedAt" and fields[i] != nil) {
                    continue;
                }
                newModel.setAttribute(fields[i], parsed.get(fields[i]));
            }

            r.rows.push(newModel);
        });
        r.rowsAffected = r.rows.len();

        return Success(r); 
    }

    /* 
     * last gets the last record ordered by primary key desc.
     */
    last(model) {
        const klass = model._class;

        const err = this.verifyAnnotations(model, "Table", true);
        if (not err.success()) {
            return err;
        }

        const tableName = this.tableName(model);
        const fields = model.getAttributes()["fields"].filter(def(x) => x != "_name");
        const fieldsLen = fields.len();
        const fieldAnnotations = klass.fieldAnnotations;
        
        var jsonFields = "";

        for (var i = 0; i < fieldsLen; i += 1) {
            if (isModelField(fields[i])) {
                continue;
            }
        
            if (fieldAnnotations.get(fields[i]) != nil) {
                if (fieldAnnotations.get(fields[i]).exists("Column")) {
                    jsonFields += "'" + fields[i] + "', " + fieldAnnotations.get(fields[i]).get("Column") + ",";
                }
            } else {
                jsonFields += "'" + fields[i] + "', " + fields[i] + ",";
            }
        }

        jsonFields = jsonFields[0:jsonFields.len()-1];

        var query = selectJsonQuery.format(jsonFields, tableName);
        query += " ORDER BY id DESC LIMIT 1";

        if (this.config.debug) {
            Log.println("DEBUG: {}".format(query));
        }

        const res = this.db.execute(query);
        if (not res.success()) {
            return res;
        }

        const r = Result();
        r.rows = [];

        res.unwrap().forEach(def(row) => {
            const parsed = JSON.parse(row[0]).unwrap();
            const newModel = klass();

            for (var i = 0; i < fieldsLen; i += 1) {
                // filter out "deleted" records
                if (fields[i] == "deletedAt" and fields[i] != nil) {
                    continue;
                }
                newModel.setAttribute(fields[i], parsed.get(fields[i]));
            }

            r.rows.push(newModel);
        });
        r.rowsAffected = r.rows.len();

        return Success(r); 
    }
}
